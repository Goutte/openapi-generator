# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# The OpenAPI Generator Community, © Public Domain, 2022
# API DemoUserApi

extends DemoApiBee
class_name DemoUserApi

# Operation createUser → POST /user
# Create user
#
# This can only be done by the logged in user.
func create_user(
	# demoUser: DemoUser
	# Created user object
	demoUser: DemoUser,
	on_success: Callable = Callable(),  # func(result)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):
	# CollectionFormat: NO

	# Note: `bzz_` prefix in variable names is to reduce collisions and therefore renames
	# Warn: Make sure all local variable names here are also listed in our Java CodeGen.

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user"

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := bee_convert_http_method("POST")

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null
	bzz_body = demoUser


	bee_request(
		bzz_method, bzz_path, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			#print('SUCCESS!')
			#print(bzz_result)
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			#printerr("FAILURE!")
			#print(bzz_error)
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

# Operation createUsersWithArrayInput → POST /user/createWithArray
# Creates list of users with given input array
func create_users_with_array_input(
	# user: Array
	# List of user object
	user: Array,
	on_success: Callable = Callable(),  # func(result)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):
	# CollectionFormat: NO

	# Note: `bzz_` prefix in variable names is to reduce collisions and therefore renames
	# Warn: Make sure all local variable names here are also listed in our Java CodeGen.

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user/createWithArray"

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := bee_convert_http_method("POST")

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null
	bzz_body = user


	bee_request(
		bzz_method, bzz_path, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			#print('SUCCESS!')
			#print(bzz_result)
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			#printerr("FAILURE!")
			#print(bzz_error)
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

# Operation createUsersWithListInput → POST /user/createWithList
# Creates list of users with given input array
func create_users_with_list_input(
	# user: Array
	# List of user object
	user: Array,
	on_success: Callable = Callable(),  # func(result)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):
	# CollectionFormat: NO

	# Note: `bzz_` prefix in variable names is to reduce collisions and therefore renames
	# Warn: Make sure all local variable names here are also listed in our Java CodeGen.

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user/createWithList"

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := bee_convert_http_method("POST")

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null
	bzz_body = user


	bee_request(
		bzz_method, bzz_path, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			#print('SUCCESS!')
			#print(bzz_result)
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			#printerr("FAILURE!")
			#print(bzz_error)
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

# Operation deleteUser → DELETE /user/{username}
# Delete user
#
# This can only be done by the logged in user.
func delete_user(
	# username: String   Eg: username_example
	# The name that needs to be deleted
	username: String,
	on_success: Callable = Callable(),  # func(result)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):
	# CollectionFormat: NO

	# Note: `bzz_` prefix in variable names is to reduce collisions and therefore renames
	# Warn: Make sure all local variable names here are also listed in our Java CodeGen.

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user/{username}".replace("{" + "username" + "}", bee_urlize_path_param(username))

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := bee_convert_http_method("DELETE")

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null


	bee_request(
		bzz_method, bzz_path, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			#print('SUCCESS!')
			#print(bzz_result)
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			#printerr("FAILURE!")
			#print(bzz_error)
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

# Operation getUserByName → GET /user/{username}
# Get user by user name
func get_user_by_name(
	# username: String   Eg: username_example
	# The name that needs to be fetched. Use user1 for testing.
	username: String,
	on_success: Callable = Callable(),  # func(result: User)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):
	# CollectionFormat: NO

	# Note: `bzz_` prefix in variable names is to reduce collisions and therefore renames
	# Warn: Make sure all local variable names here are also listed in our Java CodeGen.

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user/{username}".replace("{" + "username" + "}", bee_urlize_path_param(username))

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := bee_convert_http_method("GET")

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	# Will be used at some point for denormalization
	# baseType = "User"
	# openApiType = "User"
	# dataType = "User"
	# complexType = "User"
	# isArray = "false"
	var _bzz_return_type := "User"

	bee_request(
		bzz_method, bzz_path, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			#print('SUCCESS!')
			#print(bzz_result)
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			#printerr("FAILURE!")
			#print(bzz_error)
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

# Operation loginUser → GET /user/login
# Logs user into the system
func login_user(
	# username: String   Eg: username_example
	# The user name for login
	username: String,
	# password: String   Eg: password_example
	# The password for login in clear text
	password: String,
	on_success: Callable = Callable(),  # func(result: String)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):
	# CollectionFormat: NO

	# Note: `bzz_` prefix in variable names is to reduce collisions and therefore renames
	# Warn: Make sure all local variable names here are also listed in our Java CodeGen.

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user/login"

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := bee_convert_http_method("GET")

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["username"] = username
	bzz_query["password"] = password

	var bzz_body = null

	# Will be used at some point for denormalization
	# baseType = "string"
	# openApiType = "string"
	# dataType = "String"
	# complexType = "string"
	# isArray = "false"
	var _bzz_return_type := "string"

	bee_request(
		bzz_method, bzz_path, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			#print('SUCCESS!')
			#print(bzz_result)
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			#printerr("FAILURE!")
			#print(bzz_error)
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

# Operation logoutUser → GET /user/logout
# Logs out current logged in user session
func logout_user(
	on_success: Callable = Callable(),  # func(result)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):
	# CollectionFormat: NO

	# Note: `bzz_` prefix in variable names is to reduce collisions and therefore renames
	# Warn: Make sure all local variable names here are also listed in our Java CodeGen.

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user/logout"

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := bee_convert_http_method("GET")

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null


	bee_request(
		bzz_method, bzz_path, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			#print('SUCCESS!')
			#print(bzz_result)
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			#printerr("FAILURE!")
			#print(bzz_error)
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

# Operation updateUser → PUT /user/{username}
# Updated user
#
# This can only be done by the logged in user.
func update_user(
	# username: String   Eg: username_example
	# name that need to be deleted
	username: String,
	# demoUser: DemoUser
	# Updated user object
	demoUser: DemoUser,
	on_success: Callable = Callable(),  # func(result)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):
	# CollectionFormat: NO

	# Note: `bzz_` prefix in variable names is to reduce collisions and therefore renames
	# Warn: Make sure all local variable names here are also listed in our Java CodeGen.

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user/{username}".replace("{" + "username" + "}", bee_urlize_path_param(username))

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := bee_convert_http_method("PUT")

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null
	bzz_body = demoUser


	bee_request(
		bzz_method, bzz_path, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			#print('SUCCESS!')
			#print(bzz_result)
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			#printerr("FAILURE!")
			#print(bzz_error)
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

