{{>partials/api_headers}}

{{#each models}}
{{#with model}}

# {{classname}} Model
{{#if description}}
# {{{description}}}
{{/if}}
# namespace: {{modelPackage}}

{{>partials/model_statement_extends}}

{{>partials/model_statement_class_name}}


# It's convenient to know the class name, for error messages.
# https://github.com/godotengine/godot/issues/21789
var bee_class_name := "{{classname}}"


{{#each vars}}
{{#if deprecated}}
# /!.  DEPRECATED
{{/if}}
{{#if description}}
# {{{description}}}
{{/if}}
# Type: {{>partials/data_type}}
# Required: {{#unless required}}False{{/unless}}{{#if required}}True{{/if}}
{{#if example}}
# Example: {{{example}}}
{{/if}}
{{#if isEnum}}
# Allowed values:
{{/if}}
var {{name}}: {{>partials/data_type}}{{#if defaultValue}} = {{{defaultValue}}}{{/if}}:
	set(value):
		__{{name}}__was__set = true
		{{name}} = value
var __{{name}}__was__set := false

{{/each}}

func bee_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
{{#each vars}}
{{#if required}}
	if not self.__{{name}}__was__set:
		bzz_missing_properties.append("{{name}}")
{{/if}}
{{/each}}
	return bzz_missing_properties


func bee_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
{{#each vars}}
	if self.__{{name}}__was__set:
		bzz_dictionary["{{name}}"] = self.{{name}}
{{/each}}
	return bzz_dictionary


func bee_normalize_fully() -> Dictionary:
	return {
{{#each vars}}
		"{{name}}": self.{{name}},
{{/each}}
	}

{{/with}}
{{/each}}